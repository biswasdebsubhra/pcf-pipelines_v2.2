groups: []
jobs:
- name: deploy-opsman
  plan:
  - aggregate:
    - do: []
    - get: pivnet-opsman-product
      params:
        unpack: true
      resource: pcf-ops-manager
  - config:
      image_resource:
        params:
          unpack: true
        source:
          access_key_id: {{s3_access_key_id}}
          bucket: {{s3_bucket}}
          endpoint: {{s3_endpoint}}
          regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
          secret_access_key: {{s3_secret_access_key}}
        type: s3
      inputs:
      - name: pivnet-opsman-product
        path: ""
      params:
        GOVC_CA_CERT: ""
        GOVC_DATACENTER: ""
        GOVC_DATASTORE: ""
        GOVC_HOST: ""
        GOVC_INSECURE: ""
        GOVC_NETWORK: ""
        GOVC_PASSWORD: ""
        GOVC_RESOURCE_POOL: ""
        GOVC_URL: ""
        GOVC_USERNAME: ""
        OM_DNS_SERVERS: ""
        OM_GATEWAY: ""
        OM_IP: ""
        OM_NETMASK: ""
        OM_NTP_SERVERS: ""
        OM_VM_FOLDER: ""
        OM_VM_NAME: ""
        OM_VM_NETWORK: ""
        OM_VM_POWER_STATE: ""
        OPS_MGR_SSH_PWD: ""
        OPSMAN_DISK_TYPE: ""
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ""
      platform: linux
      run:
        args:
        - -c
        - |
          cat > task.sh <<'EO_SH'
          #!/bin/bash

          set -eu

          file_path=$(find ./pivnet-opsman-product/ -name "*.ova")

          echo "$file_path"

          export GOVC_TLS_CA_CERTS=/tmp/vcenter-ca.pem
          echo "$GOVC_CA_CERT" > "$GOVC_TLS_CA_CERTS"

          govc import.spec "$file_path" | python -m json.tool > om-import.json

          cat > filters <<'EOF'
          del(.Deployment) |
          .Name = $vmName |
          .DiskProvisioning = $diskType |
          .NetworkMapping[].Network = $network |
          .PowerOn = $powerOn |
          (.PropertyMapping[] | select(.Key == "ip0")).Value = $ip0 |
          (.PropertyMapping[] | select(.Key == "netmask0")).Value = $netmask0 |
          (.PropertyMapping[] | select(.Key == "gateway")).Value = $gateway |
          (.PropertyMapping[] | select(.Key == "DNS")).Value = $dns |
          (.PropertyMapping[] | select(.Key == "ntp_servers")).Value = $ntpServers |
          (.PropertyMapping[] | select(.Key == "admin_password")).Value = $adminPassword |
          (.PropertyMapping[] | select(.Key == "custom_hostname")).Value = $customHostname
          EOF

          jq \
            --arg ip0 "$OM_IP" \
            --arg netmask0 "$OM_NETMASK" \
            --arg gateway "$OM_GATEWAY" \
            --arg dns "$OM_DNS_SERVERS" \
            --arg ntpServers "$OM_NTP_SERVERS" \
            --arg adminPassword "$OPS_MGR_SSH_PWD" \
            --arg customHostname "$OPSMAN_DOMAIN_OR_IP_ADDRESS" \
            --arg network "$OM_VM_NETWORK" \
            --arg vmName "$OM_VM_NAME" \
            --arg diskType "$OPSMAN_DISK_TYPE" \
            --argjson powerOn "$OM_VM_POWER_STATE" \
            --from-file filters \
            om-import.json > options.json

          cat options.json

          if [ -z "$OM_VM_FOLDER" ]; then
            govc import.ova -options=options.json "$file_path"
          else
            if [ "$(govc folder.info "$OM_VM_FOLDER" 2>&1 | grep "$OM_VM_FOLDER" | awk '{print $2}')" != "$OM_VM_FOLDER" ]; then
              govc folder.create "$OM_VM_FOLDER"
            fi
            govc import.ova -folder="$OM_VM_FOLDER" -options=options.json "$file_path"
          fi

          EO_SH

          chmod +x task.sh
          ./task.sh
        dir: ""
        path: sh
    params:
      GOVC_CA_CERT: {{vcenter_ca_cert}}
      GOVC_DATACENTER: {{vcenter_datacenter}}
      GOVC_DATASTORE: {{vcenter_datastore}}
      GOVC_HOST: {{om_vm_host}}
      GOVC_INSECURE: {{vcenter_insecure}}
      GOVC_NETWORK: {{om_vm_network}}
      GOVC_PASSWORD: {{vcenter_pwd}}
      GOVC_RESOURCE_POOL: {{om_resource_pool}}
      GOVC_URL: {{vcenter_host}}
      GOVC_USERNAME: {{vcenter_usr}}
      OM_DNS_SERVERS: {{om_dns_servers}}
      OM_GATEWAY: {{om_gateway}}
      OM_IP: {{om_ip}}
      OM_NETMASK: {{om_netmask}}
      OM_NTP_SERVERS: {{om_ntp_servers}}
      OM_VM_FOLDER: {{om_vm_folder}}
      OM_VM_NAME: {{om_vm_name}}
      OM_VM_NETWORK: {{om_vm_network}}
      OM_VM_POWER_STATE: {{om_vm_power_state}}
      OPS_MGR_SSH_PWD: {{opsman_ssh_password}}
      OPSMAN_DISK_TYPE: {{opsman_disk_type}}
      OPSMAN_DOMAIN_OR_IP_ADDRESS: {{opsman_domain_or_ip_address}}
    task: deploy
- name: configure-director
  plan:
  - aggregate:
    - do: []
    - get: pcf-ops-manager
      params:
        unpack: true
      passed:
      - deploy-opsman
      trigger: true
  - config:
      image_resource:
        params:
          unpack: true
        source:
          access_key_id: {{s3_access_key_id}}
          bucket: {{s3_bucket}}
          endpoint: {{s3_endpoint}}
          regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
          secret_access_key: {{s3_secret_access_key}}
        type: s3
      inputs: []
      params:
        OM_DECRYPTION_PWD: ""
        OPS_MGR_PWD: ""
        OPS_MGR_USR: ""
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ""
      platform: linux
      run:
        args:
        - -c
        - |
          cat > task.sh <<'EO_SH'
          #!/bin/bash

          set -eu

          until $(curl --output /dev/null -k --silent --head --fail https://$OPSMAN_DOMAIN_OR_IP_ADDRESS/setup); do
              printf '.'
              sleep 5
          done

          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --skip-ssl-validation \
            configure-authentication \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            --decryption-passphrase $OM_DECRYPTION_PWD

          EO_SH

          chmod +x task.sh
          ./task.sh
        dir: ""
        path: sh
    params:
      OM_DECRYPTION_PWD: {{om_decryption_pwd}}
      OPS_MGR_PWD: {{opsman_admin_password}}
      OPS_MGR_USR: {{opsman_admin_username}}
      OPSMAN_DOMAIN_OR_IP_ADDRESS: {{opsman_domain_or_ip_address}}
    task: config-opsman-auth
  - config:
      image_resource:
        params:
          unpack: true
        source:
          access_key_id: {{s3_access_key_id}}
          bucket: {{s3_bucket}}
          endpoint: {{s3_endpoint}}
          regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
          secret_access_key: {{s3_secret_access_key}}
        type: s3
      inputs: []
      params:
        AZ_1: ""
        AZ_1_CLUSTER_NAME: ""
        AZ_1_RP_NAME: ""
        AZ_2: ""
        AZ_2_CLUSTER_NAME: ""
        AZ_2_RP_NAME: ""
        AZ_3: ""
        AZ_3_CLUSTER_NAME: ""
        AZ_3_RP_NAME: ""
        BOSH_DISK_PATH: ""
        BOSH_TEMPLATE_FOLDER: ""
        BOSH_VM_FOLDER: ""
        DEPLOYMENT_EXCLUDED_RANGE: ""
        DEPLOYMENT_NETWORK_NAME: ""
        DEPLOYMENT_NW_AZS: ""
        DEPLOYMENT_NW_CIDR: ""
        DEPLOYMENT_NW_DNS: ""
        DEPLOYMENT_NW_GATEWAY: ""
        DEPLOYMENT_VCENTER_NETWORK: ""
        DYNAMIC_SERVICES_EXCLUDED_RANGE: ""
        DYNAMIC_SERVICES_NETWORK_NAME: ""
        DYNAMIC_SERVICES_NW_AZS: ""
        DYNAMIC_SERVICES_NW_CIDR: ""
        DYNAMIC_SERVICES_NW_DNS: ""
        DYNAMIC_SERVICES_NW_GATEWAY: ""
        DYNAMIC_SERVICES_VCENTER_NETWORK: ""
        ENABLE_VM_RESURRECTOR: ""
        EPHEMERAL_STORAGE_NAMES: ""
        ICMP_CHECKS_ENABLED: ""
        INFRA_EXCLUDED_RANGE: ""
        INFRA_NETWORK_NAME: ""
        INFRA_NW_AZS: ""
        INFRA_NW_CIDR: ""
        INFRA_NW_DNS: ""
        INFRA_NW_GATEWAY: ""
        INFRA_VCENTER_NETWORK: ""
        MAX_THREADS: ""
        NSX_ADDRESS: ""
        NSX_CA_CERTIFICATE: ""
        NSX_NETWORKING_ENABLED: ""
        NSX_PASSWORD: ""
        NSX_USERNAME: ""
        NTP_SERVERS: ""
        OPS_DIR_HOSTNAME: ""
        OPS_MGR_PWD: ""
        OPS_MGR_USR: ""
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ""
        PERSISTENT_STORAGE_NAMES: ""
        SERVICES_EXCLUDED_RANGE: ""
        SERVICES_NETWORK_NAME: ""
        SERVICES_NW_AZS: ""
        SERVICES_NW_CIDR: ""
        SERVICES_NW_DNS: ""
        SERVICES_NW_GATEWAY: ""
        SERVICES_VCENTER_NETWORK: ""
        TRUSTED_CERTIFICATES: ""
        VCENTER_DATA_CENTER: ""
        VCENTER_DISK_TYPE: ""
        VCENTER_HOST: ""
        VCENTER_PWD: ""
        VCENTER_USR: ""
      platform: linux
      run:
        args:
        - -c
        - |
          cat > task.sh <<'EO_SH'
          #!/bin/bash

          set -eu

          iaas_configuration=$(
            jq -n \
            --arg vcenter_host "$VCENTER_HOST" \
            --arg vcenter_username "$VCENTER_USR" \
            --arg vcenter_password "$VCENTER_PWD" \
            --arg datacenter "$VCENTER_DATA_CENTER" \
            --arg disk_type "$VCENTER_DISK_TYPE" \
            --arg ephemeral_datastores_string "$EPHEMERAL_STORAGE_NAMES" \
            --arg persistent_datastores_string "$PERSISTENT_STORAGE_NAMES" \
            --arg bosh_vm_folder "$BOSH_VM_FOLDER" \
            --arg bosh_template_folder "$BOSH_TEMPLATE_FOLDER" \
            --arg bosh_disk_path "$BOSH_DISK_PATH" \
            --argjson ssl_verification_enabled false \
            --argjson nsx_networking_enabled "$NSX_NETWORKING_ENABLED" \
            --arg nsx_address "$NSX_ADDRESS" \
            --arg nsx_username "$NSX_USERNAME" \
            --arg nsx_password "$NSX_PASSWORD" \
            --arg nsx_ca_certificate "$NSX_CA_CERTIFICATE" \
            '
            {
              "vcenter_host": $vcenter_host,
              "vcenter_username": $vcenter_username,
              "vcenter_password": $vcenter_password,
              "datacenter": $datacenter,
              "disk_type": $disk_type,
              "ephemeral_datastores_string": $ephemeral_datastores_string,
              "persistent_datastores_string": $persistent_datastores_string,
              "bosh_vm_folder": $bosh_vm_folder,
              "bosh_template_folder": $bosh_template_folder,
              "bosh_disk_path": $bosh_disk_path,
              "ssl_verification_enabled": $ssl_verification_enabled,
              "nsx_networking_enabled": $nsx_networking_enabled,
            }

            +

            # NSX networking. If not enabled, the following section is not required
            if $nsx_networking_enabled then
              {
                "nsx_address": $nsx_address,
                "nsx_username": $nsx_username,
                "nsx_password": $nsx_password,
                "nsx_ca_certificate": $nsx_ca_certificate
              }
            else
              .
            end
            '
          )

          az_configuration=$(cat <<-EOF
           [
              {
                "name": "$AZ_1",
                "cluster": "$AZ_1_CLUSTER_NAME",
                "resource_pool": "$AZ_1_RP_NAME"
              },
              {
                "name": "$AZ_2",
                "cluster": "$AZ_2_CLUSTER_NAME",
                "resource_pool": "$AZ_2_RP_NAME"
              },
              {
                "name": "$AZ_3",
                "cluster": "$AZ_3_CLUSTER_NAME",
                "resource_pool": "$AZ_3_RP_NAME"
              }
           ]
          EOF
          )

          network_configuration=$(
            jq -n \
              --argjson icmp_checks_enabled $ICMP_CHECKS_ENABLED \
              --arg infra_network_name "$INFRA_NETWORK_NAME" \
              --arg infra_vcenter_network "$INFRA_VCENTER_NETWORK" \
              --arg infra_network_cidr "$INFRA_NW_CIDR" \
              --arg infra_reserved_ip_ranges "$INFRA_EXCLUDED_RANGE" \
              --arg infra_dns "$INFRA_NW_DNS" \
              --arg infra_gateway "$INFRA_NW_GATEWAY" \
              --arg infra_availability_zones "$INFRA_NW_AZS" \
              --arg deployment_network_name "$DEPLOYMENT_NETWORK_NAME" \
              --arg deployment_vcenter_network "$DEPLOYMENT_VCENTER_NETWORK" \
              --arg deployment_network_cidr "$DEPLOYMENT_NW_CIDR" \
              --arg deployment_reserved_ip_ranges "$DEPLOYMENT_EXCLUDED_RANGE" \
              --arg deployment_dns "$DEPLOYMENT_NW_DNS" \
              --arg deployment_gateway "$DEPLOYMENT_NW_GATEWAY" \
              --arg deployment_availability_zones "$DEPLOYMENT_NW_AZS" \
              --arg services_network_name "$SERVICES_NETWORK_NAME" \
              --arg services_vcenter_network "$SERVICES_VCENTER_NETWORK" \
              --arg services_network_cidr "$SERVICES_NW_CIDR" \
              --arg services_reserved_ip_ranges "$SERVICES_EXCLUDED_RANGE" \
              --arg services_dns "$SERVICES_NW_DNS" \
              --arg services_gateway "$SERVICES_NW_GATEWAY" \
              --arg services_availability_zones "$SERVICES_NW_AZS" \
              --arg dynamic_services_network_name "$DYNAMIC_SERVICES_NETWORK_NAME" \
              --arg dynamic_services_vcenter_network "$DYNAMIC_SERVICES_VCENTER_NETWORK" \
              --arg dynamic_services_network_cidr "$DYNAMIC_SERVICES_NW_CIDR" \
              --arg dynamic_services_reserved_ip_ranges "$DYNAMIC_SERVICES_EXCLUDED_RANGE" \
              --arg dynamic_services_dns "$DYNAMIC_SERVICES_NW_DNS" \
              --arg dynamic_services_gateway "$DYNAMIC_SERVICES_NW_GATEWAY" \
              --arg dynamic_services_availability_zones "$DYNAMIC_SERVICES_NW_AZS" \
              '
              {
                "icmp_checks_enabled": $icmp_checks_enabled,
                "networks": [
                  {
                    "name": $infra_network_name,
                    "service_network": false,
                    "subnets": [
                      {
                        "iaas_identifier": $infra_vcenter_network,
                        "cidr": $infra_network_cidr,
                        "reserved_ip_ranges": $infra_reserved_ip_ranges,
                        "dns": $infra_dns,
                        "gateway": $infra_gateway,
                        "availability_zone_names": ($infra_availability_zones | split(","))
                      }
                    ]
                  },
                  {
                    "name": $deployment_network_name,
                    "service_network": false,
                    "subnets": [
                      {
                        "iaas_identifier": $deployment_vcenter_network,
                        "cidr": $deployment_network_cidr,
                        "reserved_ip_ranges": $deployment_reserved_ip_ranges,
                        "dns": $deployment_dns,
                        "gateway": $deployment_gateway,
                        "availability_zone_names": ($deployment_availability_zones | split(","))
                      }
                    ]
                  },
                  {
                    "name": $services_network_name,
                    "service_network": false,
                    "subnets": [
                      {
                        "iaas_identifier": $services_vcenter_network,
                        "cidr": $services_network_cidr,
                        "reserved_ip_ranges": $services_reserved_ip_ranges,
                        "dns": $services_dns,
                        "gateway": $services_gateway,
                        "availability_zone_names": ($services_availability_zones | split(","))
                      }
                    ]
                  },
                  {
                    "name": $dynamic_services_network_name,
                    "service_network": true,
                    "subnets": [
                      {
                        "iaas_identifier": $dynamic_services_vcenter_network,
                        "cidr": $dynamic_services_network_cidr,
                        "reserved_ip_ranges": $dynamic_services_reserved_ip_ranges,
                        "dns": $dynamic_services_dns,
                        "gateway": $dynamic_services_gateway,
                        "availability_zone_names": ($dynamic_services_availability_zones | split(","))
                      }
                    ]
                  }
                ]
              }'
          )

          director_config=$(cat <<-EOF
          {
            "ntp_servers_string": "$NTP_SERVERS",
            "resurrector_enabled": $ENABLE_VM_RESURRECTOR,
            "max_threads": $MAX_THREADS,
            "database_type": "internal",
            "blobstore_type": "local",
            "director_hostname": "$OPS_DIR_HOSTNAME"
          }
          EOF
          )

          security_configuration=$(
            jq -n \
              --arg trusted_certificates "$TRUSTED_CERTIFICATES" \
              '
              {
                "trusted_certificates": $trusted_certificates,
                "vm_password_type": "generate"
              }'
          )

          network_assignment=$(
          jq -n \
            --arg infra_availability_zones "$INFRA_NW_AZS" \
            --arg network "$INFRA_NETWORK_NAME" \
            '
            {
            "singleton_availability_zone": {
              "name": ($infra_availability_zones | split(",") | .[0])
            },
            "network": {
              "name": $network
            }
            }'
          )

          echo "Configuring IaaS, AZ and Director..."
          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --skip-ssl-validation \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            configure-director \
            --iaas-configuration "$iaas_configuration" \
            --director-configuration "$director_config" \
            --az-configuration "$az_configuration"

          echo "Configuring Network and Security..."
          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --skip-ssl-validation \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            configure-director \
            --networks-configuration "$network_configuration" \
            --network-assignment "$network_assignment" \
            --security-configuration "$security_configuration"

          EO_SH

          chmod +x task.sh
          ./task.sh
        dir: ""
        path: sh
    params:
      AZ_1: {{az_1_name}}
      AZ_1_CLUSTER_NAME: {{az_1_cluster_name}}
      AZ_1_RP_NAME: {{az_1_rp_name}}
      AZ_2: {{az_2_name}}
      AZ_2_CLUSTER_NAME: {{az_2_cluster_name}}
      AZ_2_RP_NAME: {{az_2_rp_name}}
      AZ_3: {{az_3_name}}
      AZ_3_CLUSTER_NAME: {{az_3_cluster_name}}
      AZ_3_RP_NAME: {{az_3_rp_name}}
      BOSH_DISK_PATH: {{bosh_disk_path}}
      BOSH_TEMPLATE_FOLDER: {{bosh_template_folder}}
      BOSH_VM_FOLDER: {{bosh_vm_folder}}
      DEPLOYMENT_EXCLUDED_RANGE: {{deployment_excluded_range}}
      DEPLOYMENT_NETWORK_NAME: {{deployment_network_name}}
      DEPLOYMENT_NW_AZS: {{deployment_nw_azs}}
      DEPLOYMENT_NW_CIDR: {{deployment_nw_cidr}}
      DEPLOYMENT_NW_DNS: {{deployment_nw_dns}}
      DEPLOYMENT_NW_GATEWAY: {{deployment_nw_gateway}}
      DEPLOYMENT_VCENTER_NETWORK: {{deployment_vsphere_network}}
      DYNAMIC_SERVICES_EXCLUDED_RANGE: {{dynamic_services_excluded_range}}
      DYNAMIC_SERVICES_NETWORK_NAME: {{dynamic_services_network_name}}
      DYNAMIC_SERVICES_NW_AZS: {{dynamic_services_nw_azs}}
      DYNAMIC_SERVICES_NW_CIDR: {{dynamic_services_nw_cidr}}
      DYNAMIC_SERVICES_NW_DNS: {{dynamic_services_nw_dns}}
      DYNAMIC_SERVICES_NW_GATEWAY: {{dynamic_services_nw_gateway}}
      DYNAMIC_SERVICES_VCENTER_NETWORK: {{dynamic_services_vsphere_network}}
      ENABLE_VM_RESURRECTOR: {{enable_vm_resurrector}}
      EPHEMERAL_STORAGE_NAMES: {{ephemeral_storage_names}}
      ICMP_CHECKS_ENABLED: {{icmp_checks_enabled}}
      INFRA_EXCLUDED_RANGE: {{infra_excluded_range}}
      INFRA_NETWORK_NAME: {{infra_network_name}}
      INFRA_NW_AZS: {{infra_nw_azs}}
      INFRA_NW_CIDR: {{infra_nw_cidr}}
      INFRA_NW_DNS: {{infra_nw_dns}}
      INFRA_NW_GATEWAY: {{infra_nw_gateway}}
      INFRA_VCENTER_NETWORK: {{infra_vsphere_network}}
      MAX_THREADS: {{max_threads}}
      NSX_ADDRESS: {{nsx_address}}
      NSX_CA_CERTIFICATE: {{nsx_ca_certificate}}
      NSX_NETWORKING_ENABLED: {{nsx_networking_enabled}}
      NSX_PASSWORD: {{nsx_password}}
      NSX_USERNAME: {{nsx_username}}
      NTP_SERVERS: {{ntp_servers}}
      OPS_DIR_HOSTNAME: {{ops_dir_hostname}}
      OPS_MGR_PWD: {{opsman_admin_password}}
      OPS_MGR_USR: {{opsman_admin_username}}
      OPSMAN_DOMAIN_OR_IP_ADDRESS: {{opsman_domain_or_ip_address}}
      PERSISTENT_STORAGE_NAMES: {{persistent_storage_names}}
      SERVICES_EXCLUDED_RANGE: {{services_excluded_range}}
      SERVICES_NETWORK_NAME: {{services_network_name}}
      SERVICES_NW_AZS: {{services_nw_azs}}
      SERVICES_NW_CIDR: {{services_nw_cidr}}
      SERVICES_NW_DNS: {{services_nw_dns}}
      SERVICES_NW_GATEWAY: {{services_nw_gateway}}
      SERVICES_VCENTER_NETWORK: {{services_vsphere_network}}
      TRUSTED_CERTIFICATES: {{trusted_certificates}}
      VCENTER_DATA_CENTER: {{vcenter_datacenter}}
      VCENTER_DISK_TYPE: {{vm_disk_type}}
      VCENTER_HOST: {{vcenter_host}}
      VCENTER_PWD: {{vcenter_pwd}}
      VCENTER_USR: {{vcenter_usr}}
    task: configure-director
- name: deploy-director
  plan:
  - aggregate:
    - do: []
    - get: pcf-ops-manager
      params:
        unpack: true
      passed:
      - configure-director
      trigger: true
  - config:
      image_resource:
        params:
          unpack: true
        source:
          access_key_id: {{s3_access_key_id}}
          bucket: {{s3_bucket}}
          endpoint: {{s3_endpoint}}
          regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
          secret_access_key: {{s3_secret_access_key}}
        type: s3
      inputs: []
      params:
        OPSMAN_CLIENT_ID: ""
        OPSMAN_CLIENT_SECRET: ""
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ""
        OPSMAN_PASSWORD: ""
        OPSMAN_USERNAME: ""
      platform: linux
      run:
        args:
        - -c
        - |
          cat > task.sh <<'EO_SH'
          #!/bin/bash

          set -eu

          # Copyright 2017-Present Pivotal Software, Inc. All rights reserved.
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #  http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.

          echo "Applying changes on Ops Manager @ ${OPSMAN_DOMAIN_OR_IP_ADDRESS}"

          om-linux \
            --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
            --skip-ssl-validation \
            --client-id "${OPSMAN_CLIENT_ID}" \
            --client-secret "${OPSMAN_CLIENT_SECRET}" \
            --username "${OPSMAN_USERNAME}" \
            --password "${OPSMAN_PASSWORD}" \
            apply-changes \
            --ignore-warnings

          EO_SH

          chmod +x task.sh
          ./task.sh
        dir: ""
        path: sh
    params:
      OPSMAN_CLIENT_ID: ""
      OPSMAN_CLIENT_SECRET: ""
      OPSMAN_DOMAIN_OR_IP_ADDRESS: {{opsman_domain_or_ip_address}}
      OPSMAN_PASSWORD: {{opsman_admin_password}}
      OPSMAN_USERNAME: {{opsman_admin_username}}
    task: apply-changes
- name: upload-ert
  plan:
  - aggregate:
    - do: []
    - get: pivnet-product
      params:
        unpack: true
      resource: elastic-runtime
    - get: pcf-ops-manager
      params:
        unpack: true
      passed:
      - deploy-director
      trigger: true
  - do:
    - config:
        image_resource:
          params:
            unpack: true
          source:
            access_key_id: {{s3_access_key_id}}
            bucket: {{s3_bucket}}
            endpoint: {{s3_endpoint}}
            regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
            secret_access_key: {{s3_secret_access_key}}
          type: s3
        inputs:
        - name: pivnet-product
        params:
          IAAS: vsphere
          OPS_MGR_DOMAIN: {{opsman_domain_or_ip_address}}
          OPS_MGR_PASSWORD: {{opsman_admin_password}}
          OPS_MGR_USERNAME: {{opsman_admin_username}}
          OPSMAN_CLIENT_ID: ""
          OPSMAN_CLIENT_SECRET: ""
          S3_ACCESS_KEY_ID: {{s3_access_key_id}}
          S3_BUCKET: {{s3_bucket}}
          S3_ENDPOINT: {{s3_endpoint}}
          S3_SECRET_ACCESS_KEY: {{s3_secret_access_key}}
        platform: linux
        run:
          args:
          - -c
          - |
            set -eu

            stemcell_version=$(
              cat ./pivnet-product/metadata.json |
              jq \
              --raw-output \
              '.Dependencies[]
              | select(.Release.Product.Name | contains("Stemcells"))
              | .Release.Version
              '
            )

            if [ -n "$stemcell_version" ]; then
              diagnostic_report=$(
                om-linux \
                  --target https://$OPS_MGR_DOMAIN \
                  --client-id "${OPSMAN_CLIENT_ID}" \
                  --client-secret "${OPSMAN_CLIENT_SECRET}" \
                  --username "$OPS_MGR_USERNAME" \
                  --password "$OPS_MGR_PASSWORD" \
                  --skip-ssl-validation \
                  curl --silent --path "/api/v0/diagnostic_report"
              )

              stemcell=$(
                echo $diagnostic_report |
                jq \
                  --arg version "$stemcell_version" \
                  --arg glob "$IAAS" \
                '.stemcells[] | select(contains($version) and contains($glob))'
              )

              if [[ -z "$stemcell" ]]; then
                export AWS_ACCESS_KEY_ID=$S3_ACCESS_KEY_ID
                export AWS_SECRET_ACCESS_KEY=$S3_SECRET_ACCESS_KEY

                echo "Downloading stemcell $stemcell_version"

                available_stemcells=$(
                  aws \
                  --endpoint-url $S3_ENDPOINT \
                  s3 ls "s3://${S3_BUCKET}/stemcells/" | grep $IAAS | cut -d' ' -f5
                )

                if [[ -z "$available_stemcells" ]]; then
                  echo "No stemcells available for ${IAAS} in s3://${S3_BUCKET}/stemcells/"
                  exit 1
                fi

                stemcell_to_download=$(
                  set +e
                  echo "$available_stemcells" | grep $stemcell_version
                  set -e
                )

                if [[ -z "$stemcell_to_download" ]]; then
                  echo "Stemcell with version '$stemcell_version' not found in s3://${S3_BUCKET}/stemcells/"
                  exit 1
                fi

                aws \
                --endpoint-url $S3_ENDPOINT \
                s3 cp "s3://${S3_BUCKET}/stemcells/${stemcell_to_download}" .

                om-linux \
                  --target https://$OPS_MGR_DOMAIN \
                  --client-id "${OPSMAN_CLIENT_ID}" \
                  --client-secret "${OPSMAN_CLIENT_SECRET}" \
                  --username "$OPS_MGR_USERNAME" \
                  --password "$OPS_MGR_PASSWORD" \
                  --skip-ssl-validation \
                  upload-stemcell \
                  --stemcell "./${stemcell_to_download}"
              fi
            fi
          path: bash
      task: upload-stemcell
    - config:
        image_resource:
          params:
            unpack: true
          source:
            access_key_id: {{s3_access_key_id}}
            bucket: {{s3_bucket}}
            endpoint: {{s3_endpoint}}
            regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
            secret_access_key: {{s3_secret_access_key}}
          type: s3
        inputs:
        - name: pivnet-product
        params:
          OPS_MGR_DOMAIN: {{opsman_domain_or_ip_address}}
          OPS_MGR_PASSWORD: {{opsman_admin_password}}
          OPS_MGR_USERNAME: {{opsman_admin_username}}
          OPSMAN_CLIENT_ID: ""
          OPSMAN_CLIENT_SECRET: ""
        platform: linux
        run:
          args:
          - -c
          - |
            set -eu

            file_path=$(find ./pivnet-product -name "*.pivotal")

            om-linux \
            --target https://$OPS_MGR_DOMAIN \
            --client-id "${OPSMAN_CLIENT_ID}" \
            --client-secret "${OPSMAN_CLIENT_SECRET}" \
            --username "$OPS_MGR_USERNAME" \
            --password "$OPS_MGR_PASSWORD" \
            --request-timeout 3600 \
            --skip-ssl-validation \
            upload-product \
            --product $file_path
          path: bash
      task: upload-tile
- name: stage-ert
  plan:
  - aggregate:
    - do: []
    - get: pcf-ops-manager
      params:
        unpack: true
      passed:
      - upload-ert
      trigger: true
    - get: pivnet-product
      params:
        unpack: true
      passed:
      - upload-ert
      resource: elastic-runtime
  - config:
      image_resource:
        params:
          unpack: true
        source:
          access_key_id: {{s3_access_key_id}}
          bucket: {{s3_bucket}}
          endpoint: {{s3_endpoint}}
          regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
          secret_access_key: {{s3_secret_access_key}}
        type: s3
      inputs:
      - name: pivnet-product
        path: ""
      params:
        OPSMAN_CLIENT_ID: ""
        OPSMAN_CLIENT_SECRET: ""
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ""
        OPSMAN_PASSWORD: ""
        OPSMAN_USERNAME: ""
      platform: linux
      run:
        args:
        - -c
        - |
          cat > task.sh <<'EO_SH'
          #!/bin/bash

          set -eu

          # Copyright 2017-Present Pivotal Software, Inc. All rights reserved.
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #  http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.

          AVAILABLE=$(om-linux \
            --skip-ssl-validation \
            --client-id "${OPSMAN_CLIENT_ID}" \
            --client-secret "${OPSMAN_CLIENT_SECRET}" \
            --username "${OPSMAN_USERNAME}" \
            --password "${OPSMAN_PASSWORD}" \
            --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
            curl -path /api/v0/available_products)
          STAGED=$(om-linux \
            --skip-ssl-validation \
            --client-id "${OPSMAN_CLIENT_ID}" \
            --client-secret "${OPSMAN_CLIENT_SECRET}" \
            --username "${OPSMAN_USERNAME}" \
            --password "${OPSMAN_PASSWORD}" \
            --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
            curl -path /api/v0/staged/products)

          # Should the slug contain more than one product, pick only the first.
          FILE_PATH=`find ./pivnet-product -name *.pivotal | sort | head -1`
          unzip $FILE_PATH metadata/*

          PRODUCT_NAME="$(cat metadata/*.yml | grep '^name' | cut -d' ' -f 2)"
          desired_version="$(cat metadata/*.yml | grep '^product_version' | cut -d' ' -f 2)"

          # Figure out which products are unstaged.
          UNSTAGED_ALL=$(jq -n --argjson available "$AVAILABLE" --argjson staged "$STAGED" \
            '$available - ($staged | map({"name": .type, "product_version": .product_version}))')

          UNSTAGED_PRODUCT=$(echo "$UNSTAGED_ALL" | jq \
            --arg product_name "$PRODUCT_NAME" \
            --arg product_version "$desired_version" \
            'map(select(.name == $product_name)) | map(select(.product_version | startswith($product_version)))'
          )

          # There should be only one such unstaged product.
          if [ "$(echo $UNSTAGED_PRODUCT | jq '. | length')" -ne "1" ]; then
            echo "Need exactly one unstaged build for $PRODUCT_NAME version $desired_version"
            jq -n "$UNSTAGED_PRODUCT"
            exit 1
          fi

          full_version=$(echo "$UNSTAGED_PRODUCT" | jq -r '.[].product_version')

          om-linux --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
            --skip-ssl-validation \
            --client-id "${OPSMAN_CLIENT_ID}" \
            --client-secret "${OPSMAN_CLIENT_SECRET}" \
            --username "${OPSMAN_USERNAME}" \
            --password "${OPSMAN_PASSWORD}" \
            stage-product \
            --product-name "${PRODUCT_NAME}" \
            --product-version "${full_version}"

          EO_SH

          chmod +x task.sh
          ./task.sh
        dir: ""
        path: sh
    params:
      OPSMAN_CLIENT_ID: ""
      OPSMAN_CLIENT_SECRET: ""
      OPSMAN_DOMAIN_OR_IP_ADDRESS: {{opsman_domain_or_ip_address}}
      OPSMAN_PASSWORD: {{opsman_admin_password}}
      OPSMAN_USERNAME: {{opsman_admin_username}}
    task: stage
- name: deploy-ert
  plan:
  - aggregate:
    - do: []
    - get: pcf-ops-manager
      params:
        unpack: true
      passed:
      - stage-ert
      trigger: true
    - get: pivnet-product
      params:
        unpack: true
      passed:
      - stage-ert
      resource: elastic-runtime
  - config:
      image_resource:
        params:
          unpack: true
        source:
          access_key_id: {{s3_access_key_id}}
          bucket: {{s3_bucket}}
          endpoint: {{s3_endpoint}}
          regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
          secret_access_key: {{s3_secret_access_key}}
        type: s3
      inputs: []
      params:
        ALLOW_APP_SSH_ACCESS: ""
        APPS_DOMAIN: ""
        AUTHENTICATION_MODE: ""
        BACKUP_PREPARE_INSTANCES: ""
        CLOCK_GLOBAL_INSTANCES: ""
        CLOUD_CONTROLLER_INSTANCES: ""
        CLOUD_CONTROLLER_WORKER_INSTANCES: ""
        COMPANY_NAME: ""
        CONSUL_SERVER_INSTANCES: ""
        CONTAINER_NETWORKING_NW_CIDR: ""
        CREDHUB_INSTANCES: ""
        CREDHUB_PRIMARY_ENCRYPTION_NAME: ""
        CREDUB_ENCRYPTION_KEY_NAME1: ""
        CREDUB_ENCRYPTION_KEY_NAME2: ""
        CREDUB_ENCRYPTION_KEY_NAME3: ""
        CREDUB_ENCRYPTION_KEY_SECRET1: ""
        CREDUB_ENCRYPTION_KEY_SECRET2: ""
        CREDUB_ENCRYPTION_KEY_SECRET3: ""
        DEFAULT_QUOTA_MAX_SERVICES_COUNT: ""
        DEFAULT_QUOTA_MEMORY_LIMIT_IN_MB: ""
        DEPLOYMENT_NW_AZS: ""
        DIEGO_BRAIN_INSTANCES: ""
        DIEGO_BRAIN_NSX_LB_EDGE_NAME: ""
        DIEGO_BRAIN_NSX_LB_POOL_NAME: ""
        DIEGO_BRAIN_NSX_LB_PORT: ""
        DIEGO_BRAIN_NSX_LB_SECURITY_GROUP: ""
        DIEGO_BRAIN_NSX_SECURITY_GROUP: ""
        DIEGO_CELL_INSTANCES: ""
        DIEGO_DATABASE_INSTANCES: ""
        DISABLE_HTTP_PROXY: ""
        DISABLE_INSECURE_COOKIES: ""
        DOPPLER_INSTANCES: ""
        ENABLE_SECURITY_EVENT_LOGGING: ""
        ERT_SINGLETON_JOB_AZ: ""
        FIRST_NAME_ATTR: ""
        FRONTEND_IDLE_TIMEOUT: ""
        GROUP_SEARCH_BASE: ""
        GROUP_SEARCH_FILTER: ""
        HA_PROXY_INSTANCES: ""
        HA_PROXY_IPS: ""
        HA_PROXY_LB_NAME: ""
        HAPROXY_BACKEND_CA: ""
        HAPROXY_FLOATING_IPS: ""
        HAPROXY_FORWARD_TLS: ""
        HAPROXY_TLS_CIPHERS: ""
        IAAS: ""
        IGNORE_SSL_CERT: ""
        INTERNET_CONNECTED: ""
        LAST_NAME_ATTR: ""
        LDAP_PWD: ""
        LDAP_URL: ""
        LDAP_USER: ""
        LOGGREGATOR_ENDPOINT_PORT: ""
        LOGGREGATOR_TRAFFICCONTROLLER_INSTANCES: ""
        MAIL_ATTR_NAME: ""
        MYSQL_INSTANCES: ""
        MYSQL_MONITOR_EMAIL: ""
        MYSQL_MONITOR_INSTANCES: ""
        MYSQL_NSX_LB_EDGE_NAME: ""
        MYSQL_NSX_LB_POOL_NAME: ""
        MYSQL_NSX_LB_PORT: ""
        MYSQL_NSX_LB_SECURITY_GROUP: ""
        MYSQL_NSX_SECURITY_GROUP: ""
        MYSQL_PROXY_INSTANCES: ""
        MYSQL_STATIC_IPS: ""
        NATS_INSTANCES: ""
        NETWORK_NAME: ""
        NFS_SERVER_INSTANCES: ""
        OPS_MGR_PWD: ""
        OPS_MGR_USR: ""
        OPSMAN_CLIENT_ID: ""
        OPSMAN_CLIENT_SECRET: ""
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ""
        POE_SSL_CERT1: ""
        POE_SSL_CERT2: ""
        POE_SSL_CERT3: ""
        POE_SSL_KEY1: ""
        POE_SSL_KEY2: ""
        POE_SSL_KEY3: ""
        POE_SSL_NAME1: ""
        POE_SSL_NAME2: ""
        POE_SSL_NAME3: ""
        ROUTE_SERVICES: ""
        ROUTER_INSTANCES: ""
        ROUTER_NSX_LB_EDGE_NAME: ""
        ROUTER_NSX_LB_POOL_NAME: ""
        ROUTER_NSX_LB_PORT: ""
        ROUTER_NSX_LB_SECURITY_GROUP: ""
        ROUTER_NSX_SECURITY_GROUP: ""
        ROUTER_REQUEST_TIMEOUT_IN_SEC: ""
        ROUTER_STATIC_IPS: ""
        ROUTER_TLS_CIPHERS: ""
        ROUTING_CUSTOM_CA_CERTIFICATES: ""
        ROUTING_TLS_TERMINATION: ""
        SAML_SSL_CERT: ""
        SAML_SSL_PRIVATE_KEY: ""
        SEARCH_BASE: ""
        SEARCH_FILTER: ""
        SECURITY_ACKNOWLEDGEMENT: ""
        SKIP_CERT_VERIFY: ""
        SMTP_ADDRESS: ""
        SMTP_AUTH_MECHANISM: ""
        SMTP_ENABLE_STARTTLS_AUTO: ""
        SMTP_FROM: ""
        SMTP_PORT: ""
        SMTP_PWD: ""
        SMTP_USER: ""
        SSH_STATIC_IPS: ""
        SYSLOG_ADAPTER_INSTANCES: ""
        SYSLOG_DRAIN_BUFFER_SIZE: ""
        SYSLOG_HOST: ""
        SYSLOG_PORT: ""
        SYSLOG_PROTOCOL: ""
        SYSLOG_SCHEDULER_INSTANCES: ""
        SYSTEM_DOMAIN: ""
        TCP_ROUTER_INSTANCES: ""
        TCP_ROUTER_NSX_LB_EDGE_NAME: ""
        TCP_ROUTER_NSX_LB_POOL_NAME: ""
        TCP_ROUTER_NSX_LB_PORT: ""
        TCP_ROUTER_NSX_LB_SECURITY_GROUP: ""
        TCP_ROUTER_NSX_SECURITY_GROUP: ""
        TCP_ROUTER_STATIC_IPS: ""
        TCP_ROUTING: ""
        TCP_ROUTING_PORTS: ""
        UAA_INSTANCES: ""
      platform: linux
      run:
        args:
        - -c
        - |
          cat > task.sh <<'EO_SH'
          #!/bin/bash

          set -euo pipefail

          function generate_cert () (
            set -eu
            local domains="$1"

            local data=$(echo $domains | jq --raw-input -c '{"domains": (. | split(" "))}')

            local response=$(
              om-linux \
                --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
                --client-id "${OPSMAN_CLIENT_ID}" \
                --client-secret "${OPSMAN_CLIENT_SECRET}" \
                --username "$OPS_MGR_USR" \
                --password "$OPS_MGR_PWD" \
                --skip-ssl-validation \
                curl \
                --silent \
                --path "/api/v0/certificates/generate" \
                -x POST \
                -d $data
              )

            echo "$response"
          )

          declare networking_poe_ssl_certs_json

          function formatNetworkingPoeSslCertsJson() {
              name="${1}"
              cert=${2//$'\n'/'\n'}
              key=${3//$'\n'/'\n'}
              networking_poe_ssl_certs_json="{
                \"name\": \"$name\",
                \"certificate\": {
                  \"cert_pem\": \"$cert\",
                  \"private_key_pem\": \"$key\"
                }
              }"
              echo "$networking_poe_ssl_certs_json"
          }

          function isPopulated() {
              local true=0
              local false=1
              local envVar="${1}"

              if [[ "${envVar}" == "" ]]; then
                  return ${false}
              elif [[ "${envVar}" == null ]]; then
                  return ${false}
              else
                  return ${true}
              fi
          }

          if [[ "${POE_SSL_NAME1}" == "" || "${POE_SSL_NAME1}" == "null" ]]; then
            domains=(
              "*.${SYSTEM_DOMAIN}"
              "*.${APPS_DOMAIN}"
              "*.login.${SYSTEM_DOMAIN}"
              "*.uaa.${SYSTEM_DOMAIN}"
            )

            certificate=$(generate_cert "${domains[*]}")
            pcf_ert_ssl_cert=`echo $certificate | jq '.certificate'`
            pcf_ert_ssl_key=`echo $certificate | jq '.key'`
            networking_poe_ssl_certs_json="[
              {
                \"name\": \"Certificate 1\",
                \"certificate\": {
                  \"cert_pem\": $pcf_ert_ssl_cert,
                  \"private_key_pem\": $pcf_ert_ssl_key
                }
              }
            ]"
          else
              networking_poe_ssl_certs_json=$(formatNetworkingPoeSslCertsJson "${POE_SSL_NAME1}" "${POE_SSL_CERT1}" "${POE_SSL_KEY1}")
              if isPopulated "${POE_SSL_NAME2}"; then
                  networking_poe_ssl_certs_json2=$(formatNetworkingPoeSslCertsJson "${POE_SSL_NAME2}" "${POE_SSL_CERT2}" "${POE_SSL_KEY2}")
                  networking_poe_ssl_certs_json="$networking_poe_ssl_certs_json,$networking_poe_ssl_certs_json2"
              fi
              if isPopulated "${POE_SSL_NAME3}"; then
                  networking_poe_ssl_certs_json3=$(formatNetworkingPoeSslCertsJson "${POE_SSL_NAME3}" "${POE_SSL_CERT3}" "${POE_SSL_KEY3}")
                  networking_poe_ssl_certs_json="$networking_poe_ssl_certs_json,$networking_poe_ssl_certs_json3"
              fi
              networking_poe_ssl_certs_json="[$networking_poe_ssl_certs_json]"
          fi

          if [[ -z "$SAML_SSL_CERT" ]]; then
            saml_cert_domains=(
              "*.${SYSTEM_DOMAIN}"
              "*.login.${SYSTEM_DOMAIN}"
              "*.uaa.${SYSTEM_DOMAIN}"
            )

            saml_certificates=$(generate_cert "${saml_cert_domains[*]}")
            SAML_SSL_CERT=$(echo $saml_certificates | jq --raw-output '.certificate')
            SAML_SSL_PRIVATE_KEY=$(echo $saml_certificates | jq --raw-output '.key')
          fi

          function formatCredhubEncryptionKeysJson() {
              local credhub_encryption_key_name1="${1}"
              local credhub_encryption_key_secret1=${2//$'\n'/'\n'}
              local credhub_primary_encryption_name="${3}"
              credhub_encryption_keys_json="{
                      \"name\": \"$credhub_encryption_key_name1\",
                      \"key\":{
                          \"secret\": \"$credhub_encryption_key_secret1\"
                       }"
              if [[ "${credhub_primary_encryption_name}" == $credhub_encryption_key_name1 ]]; then
                  credhub_encryption_keys_json="$credhub_encryption_keys_json, \"primary\": true}"
              else
                  credhub_encryption_keys_json="$credhub_encryption_keys_json}"
              fi
              echo "$credhub_encryption_keys_json"
          }

          credhub_encryption_keys_json=$(formatCredhubEncryptionKeysJson "${CREDUB_ENCRYPTION_KEY_NAME1}" "${CREDUB_ENCRYPTION_KEY_SECRET1}" "${CREDHUB_PRIMARY_ENCRYPTION_NAME}")
          if isPopulated "${CREDUB_ENCRYPTION_KEY_NAME2}"; then
              credhub_encryption_keys_json2=$(formatCredhubEncryptionKeysJson "${CREDUB_ENCRYPTION_KEY_NAME2}" "${CREDUB_ENCRYPTION_KEY_SECRET2}" "${CREDHUB_PRIMARY_ENCRYPTION_NAME}")
              credhub_encryption_keys_json="$credhub_encryption_keys_json,$credhub_encryption_keys_json2"
          fi
          if isPopulated "${CREDUB_ENCRYPTION_KEY_NAME3}"; then
              credhub_encryption_keys_json3=$(formatCredhubEncryptionKeysJson "${CREDUB_ENCRYPTION_KEY_NAME3}" "${CREDUB_ENCRYPTION_KEY_SECRET3}" "${CREDHUB_PRIMARY_ENCRYPTION_NAME}")
              credhub_encryption_keys_json="$credhub_encryption_keys_json,$credhub_encryption_keys_json3"
          fi
          credhub_encryption_keys_json="[$credhub_encryption_keys_json]"

          cf_properties=$(
            jq -n \
              --arg tcp_routing "$TCP_ROUTING" \
              --arg tcp_routing_ports "$TCP_ROUTING_PORTS" \
              --arg loggregator_endpoint_port "$LOGGREGATOR_ENDPOINT_PORT" \
              --arg route_services "$ROUTE_SERVICES" \
              --arg ignore_ssl_cert "$IGNORE_SSL_CERT" \
              --arg security_acknowledgement "$SECURITY_ACKNOWLEDGEMENT" \
              --arg system_domain "$SYSTEM_DOMAIN" \
              --arg apps_domain "$APPS_DOMAIN" \
              --arg default_quota_memory_limit_in_mb "$DEFAULT_QUOTA_MEMORY_LIMIT_IN_MB" \
              --arg default_quota_max_services_count "$DEFAULT_QUOTA_MAX_SERVICES_COUNT" \
              --arg allow_app_ssh_access "$ALLOW_APP_SSH_ACCESS" \
              --arg ha_proxy_ips "$HA_PROXY_IPS" \
              --arg skip_cert_verify "$SKIP_CERT_VERIFY" \
              --arg router_static_ips "$ROUTER_STATIC_IPS" \
              --arg disable_insecure_cookies "$DISABLE_INSECURE_COOKIES" \
              --arg router_request_timeout_seconds "$ROUTER_REQUEST_TIMEOUT_IN_SEC" \
              --arg mysql_monitor_email "$MYSQL_MONITOR_EMAIL" \
              --arg tcp_router_static_ips "$TCP_ROUTER_STATIC_IPS" \
              --arg company_name "$COMPANY_NAME" \
              --arg ssh_static_ips "$SSH_STATIC_IPS" \
              --arg mysql_static_ips "$MYSQL_STATIC_IPS" \
              --arg haproxy_forward_tls "$HAPROXY_FORWARD_TLS" \
              --arg haproxy_backend_ca "$HAPROXY_BACKEND_CA" \
              --arg router_tls_ciphers "$ROUTER_TLS_CIPHERS" \
              --arg routing_tls_termination $ROUTING_TLS_TERMINATION \
              --arg routing_custom_ca_certificates "$ROUTING_CUSTOM_CA_CERTIFICATES" \
              --arg haproxy_tls_ciphers "$HAPROXY_TLS_CIPHERS" \
              --arg frontend_idle_timeout "$FRONTEND_IDLE_TIMEOUT" \
              --arg disable_http_proxy "$DISABLE_HTTP_PROXY" \
              --arg smtp_from "$SMTP_FROM" \
              --arg smtp_address "$SMTP_ADDRESS" \
              --arg smtp_port "$SMTP_PORT" \
              --arg smtp_user "$SMTP_USER" \
              --arg smtp_password "$SMTP_PWD" \
              --arg smtp_enable_starttls_auto "$SMTP_ENABLE_STARTTLS_AUTO" \
              --arg smtp_auth_mechanism "$SMTP_AUTH_MECHANISM" \
              --arg enable_security_event_logging "$ENABLE_SECURITY_EVENT_LOGGING" \
              --arg syslog_host "$SYSLOG_HOST" \
              --arg syslog_drain_buffer_size "$SYSLOG_DRAIN_BUFFER_SIZE" \
              --arg syslog_port "$SYSLOG_PORT" \
              --arg syslog_protocol "$SYSLOG_PROTOCOL" \
              --arg authentication_mode "$AUTHENTICATION_MODE" \
              --arg ldap_url "$LDAP_URL" \
              --arg ldap_user "$LDAP_USER" \
              --arg ldap_password "$LDAP_PWD" \
              --arg ldap_search_base "$SEARCH_BASE" \
              --arg ldap_search_filter "$SEARCH_FILTER" \
              --arg ldap_group_search_base "$GROUP_SEARCH_BASE" \
              --arg ldap_group_search_filter "$GROUP_SEARCH_FILTER" \
              --arg ldap_mail_attr_name "$MAIL_ATTR_NAME" \
              --arg ldap_first_name_attr "$FIRST_NAME_ATTR" \
              --arg ldap_last_name_attr "$LAST_NAME_ATTR" \
              --arg saml_cert_pem "$SAML_SSL_CERT" \
              --arg saml_key_pem "$SAML_SSL_PRIVATE_KEY" \
              --argjson credhub_encryption_keys "$credhub_encryption_keys_json" \
              --argjson networking_poe_ssl_certs "$networking_poe_ssl_certs_json" \
              --arg container_networking_nw_cidr "$CONTAINER_NETWORKING_NW_CIDR" \
              '
              {
                ".properties.system_blobstore": {
                  "value": "internal"
                },
                ".properties.logger_endpoint_port": {
                  "value": $loggregator_endpoint_port
                },
                ".properties.container_networking_interface_plugin.silk.network_cidr": {
                  "value": $container_networking_nw_cidr
                },
                ".properties.security_acknowledgement": {
                  "value": $security_acknowledgement
                },
                ".properties.push_apps_manager_company_name": {
                  "value": $company_name
                },
                ".cloud_controller.system_domain": {
                  "value": $system_domain
                },
                ".cloud_controller.apps_domain": {
                  "value": $apps_domain
                },
                ".cloud_controller.default_quota_memory_limit_mb": {
                  "value": $default_quota_memory_limit_in_mb
                },
                ".cloud_controller.default_quota_max_number_services": {
                  "value": $default_quota_max_services_count
                },
                ".cloud_controller.allow_app_ssh_access": {
                  "value": $allow_app_ssh_access
                },
                ".ha_proxy.static_ips": {
                  "value": $ha_proxy_ips
                },
                ".ha_proxy.skip_cert_verify": {
                  "value": $skip_cert_verify
                },
                ".router.static_ips": {
                  "value": $router_static_ips
                },
                ".router.disable_insecure_cookies": {
                  "value": $disable_insecure_cookies
                },
                ".router.request_timeout_in_seconds": {
                  "value": $router_request_timeout_seconds
                },
                ".router.frontend_idle_timeout": {
                  "value": $frontend_idle_timeout
                },
                ".mysql_monitor.recipient_email": {
                  "value": $mysql_monitor_email
                },
                ".tcp_router.static_ips": {
                  "value": $tcp_router_static_ips
                },
                ".diego_brain.static_ips": {
                  "value": $ssh_static_ips
                },
                ".mysql_proxy.static_ips": {
                  "value": $mysql_static_ips
                }
              }

              +

              # Credhub encryption keys
              {
                ".properties.credhub_key_encryption_passwords": {
                  "value": $credhub_encryption_keys
                }
              }

              +

              # Route Services
              if $route_services == "enable" then
               {
                 ".properties.route_services": {
                   "value": "enable"
                 },
                 ".properties.route_services.enable.ignore_ssl_cert_verification": {
                   "value": $ignore_ssl_cert
                 }
               }
              else
               {
                 ".properties.route_services": {
                   "value": "disable"
                 }
               }
              end

              +

              # TCP Routing
              if $tcp_routing == "enable" then
               {
                 ".properties.tcp_routing": {
                    "value": "enable"
                  },
                  ".properties.tcp_routing.enable.reservable_ports": {
                    "value": $tcp_routing_ports
                  }
                }
              else
                {
                  ".properties.tcp_routing": {
                    "value": "disable"
                  }
                }
              end

              +

              # SSL Termination
              {
                ".properties.networking_poe_ssl_certs": {
                  "value": $networking_poe_ssl_certs
                }
              }

              +

              # HAProxy Forward TLS
              if $haproxy_forward_tls == "enable" then
                {
                  ".properties.haproxy_forward_tls": {
                    "value": "enable"
                  },
                  ".properties.haproxy_forward_tls.enable.backend_ca": {
                    "value": $haproxy_backend_ca
                  }
                }
              else
                {
                  ".properties.haproxy_forward_tls": {
                    "value": "disable"
                  }
                }
              end

              +

              {
                ".properties.routing_disable_http": {
                  "value": $disable_http_proxy
                }
              }

              +

              {
                ".properties.routing_tls_termination": {
                  "value": $routing_tls_termination
                }
              }

              +

              if $routing_custom_ca_certificates == "" then
                .
              else
                {
                  ".properties.routing_custom_ca_certificates": {
                    "value": $routing_custom_ca_certificates
                  }
                }
              end

              +

              # TLS Cipher Suites
              {
                ".properties.gorouter_ssl_ciphers": {
                  "value": $router_tls_ciphers
                },
                ".properties.haproxy_ssl_ciphers": {
                  "value": $haproxy_tls_ciphers
                }
              }

              +

              # SMTP Configuration
              if $smtp_address != "" then
                {
                  ".properties.smtp_from": {
                    "value": $smtp_from
                  },
                  ".properties.smtp_address": {
                    "value": $smtp_address
                  },
                  ".properties.smtp_port": {
                    "value": $smtp_port
                  },
                  ".properties.smtp_credentials": {
                    "value": {
                      "identity": $smtp_user,
                      "password": $smtp_password
                    }
                  },
                  ".properties.smtp_enable_starttls_auto": {
                    "value": $smtp_enable_starttls_auto
                  },
                  ".properties.smtp_auth_mechanism": {
                    "value": $smtp_auth_mechanism
                  }
                }
              else
                .
              end

              +

              # Syslog
              if $syslog_host != "" then
                {
                  ".doppler.message_drain_buffer_size": {
                    "value": $syslog_drain_buffer_size
                  },
                  ".cloud_controller.security_event_logging_enabled": {
                    "value": $enable_security_event_logging
                  },
                  ".properties.syslog_host": {
                    "value": $syslog_host
                  },
                  ".properties.syslog_port": {
                    "value": $syslog_port
                  },
                  ".properties.syslog_protocol": {
                    "value": $syslog_protocol
                  }
                }
              else
                .
              end

              +

              # Authentication
              if $authentication_mode == "internal" then
                {
                  ".properties.uaa": {
                    "value": "internal"
                  }
                }
              elif $authentication_mode == "ldap" then
                {
                  ".properties.uaa": {
                    "value": "ldap"
                  },
                  ".properties.uaa.ldap.url": {
                    "value": $ldap_url
                  },
                  ".properties.uaa.ldap.credentials": {
                    "value": {
                      "identity": $ldap_user,
                      "password": $ldap_password
                    }
                  },
                  ".properties.uaa.ldap.search_base": {
                    "value": $ldap_search_base
                  },
                  ".properties.uaa.ldap.search_filter": {
                    "value": $ldap_search_filter
                  },
                  ".properties.uaa.ldap.group_search_base": {
                    "value": $ldap_group_search_base
                  },
                  ".properties.uaa.ldap.group_search_filter": {
                    "value": $ldap_group_search_filter
                  },
                  ".properties.uaa.ldap.mail_attribute_name": {
                    "value": $ldap_mail_attr_name
                  },
                  ".properties.uaa.ldap.first_name_attribute": {
                    "value": $ldap_first_name_attr
                  },
                  ".properties.uaa.ldap.last_name_attribute": {
                    "value": $ldap_last_name_attr
                  }
                }
              else
                .
              end

              +

              # UAA SAML Credentials
              {
                ".uaa.service_provider_key_credentials": {
                  value: {
                    "cert_pem": $saml_cert_pem,
                    "private_key_pem": $saml_key_pem
                  }
                }
              }
              '
          )

          cf_network=$(
            jq -n \
              --arg network_name "$NETWORK_NAME" \
              --arg other_azs "$DEPLOYMENT_NW_AZS" \
              --arg singleton_az "$ERT_SINGLETON_JOB_AZ" \
              '
              {
                "network": {
                  "name": $network_name
                },
                "other_availability_zones": ($other_azs | split(",") | map({name: .})),
                "singleton_availability_zone": {
                  "name": $singleton_az
                }
              }
              '
          )

          JOB_RESOURCE_CONFIG="{
            \"backup-prepare\": { \"instances\": $BACKUP_PREPARE_INSTANCES },
            \"clock_global\": { \"instances\": $CLOCK_GLOBAL_INSTANCES },
            \"cloud_controller\": { \"instances\": $CLOUD_CONTROLLER_INSTANCES },
            \"cloud_controller_worker\": { \"instances\": $CLOUD_CONTROLLER_WORKER_INSTANCES },
            \"consul_server\": { \"instances\": $CONSUL_SERVER_INSTANCES },
            \"credhub\": { \"instances\": $CREDHUB_INSTANCES },
            \"diego_brain\": { \"instances\": $DIEGO_BRAIN_INSTANCES },
            \"diego_cell\": { \"instances\": $DIEGO_CELL_INSTANCES },
            \"diego_database\": { \"instances\": $DIEGO_DATABASE_INSTANCES },
            \"doppler\": { \"instances\": $DOPPLER_INSTANCES },
            \"ha_proxy\": { \"instances\": $HA_PROXY_INSTANCES },
            \"loggregator_trafficcontroller\": { \"instances\": $LOGGREGATOR_TRAFFICCONTROLLER_INSTANCES },
            \"mysql\": { \"instances\": $MYSQL_INSTANCES },
            \"mysql_monitor\": { \"instances\": $MYSQL_MONITOR_INSTANCES },
            \"mysql_proxy\": { \"instances\": $MYSQL_PROXY_INSTANCES },
            \"nats\": { \"instances\": $NATS_INSTANCES },
            \"nfs_server\": { \"instances\": $NFS_SERVER_INSTANCES },
            \"router\": { \"instances\": $ROUTER_INSTANCES },
            \"syslog_adapter\": { \"instances\": $SYSLOG_ADAPTER_INSTANCES },
            \"syslog_scheduler\": { \"instances\": $SYSLOG_SCHEDULER_INSTANCES },
            \"tcp_router\": { \"instances\": $TCP_ROUTER_INSTANCES },
            \"uaa\": { \"instances\": $UAA_INSTANCES }
          }"

          if [[ "$IAAS" == "azure" ]]; then
            JOB_RESOURCE_CONFIG=$(echo "$JOB_RESOURCE_CONFIG" | \
              jq --argjson internet_connected $INTERNET_CONNECTED \
              '. | to_entries[] | {"key": .key, value: (.value + {"internet_connected": $internet_connected}) } ' | \
              jq -s "from_entries"
            )
          fi

          cf_resources=$(
            jq -n \
              --arg iaas "$IAAS" \
              --arg ha_proxy_elb_name "$HA_PROXY_LB_NAME" \
              --arg ha_proxy_floating_ips "$HAPROXY_FLOATING_IPS" \
              --arg tcp_router_nsx_security_group "${TCP_ROUTER_NSX_SECURITY_GROUP}" \
              --arg tcp_router_nsx_lb_edge_name "${TCP_ROUTER_NSX_LB_EDGE_NAME}" \
              --arg tcp_router_nsx_lb_pool_name "${TCP_ROUTER_NSX_LB_POOL_NAME}" \
              --arg tcp_router_nsx_lb_security_group "${TCP_ROUTER_NSX_LB_SECURITY_GROUP}" \
              --arg tcp_router_nsx_lb_port "${TCP_ROUTER_NSX_LB_PORT}" \
              --arg router_nsx_security_group "${ROUTER_NSX_SECURITY_GROUP}" \
              --arg router_nsx_lb_edge_name "${ROUTER_NSX_LB_EDGE_NAME}" \
              --arg router_nsx_lb_pool_name "${ROUTER_NSX_LB_POOL_NAME}" \
              --arg router_nsx_lb_security_group "${ROUTER_NSX_LB_SECURITY_GROUP}" \
              --arg router_nsx_lb_port "${ROUTER_NSX_LB_PORT}" \
              --arg diego_brain_nsx_security_group "${DIEGO_BRAIN_NSX_SECURITY_GROUP}" \
              --arg diego_brain_nsx_lb_edge_name "${DIEGO_BRAIN_NSX_LB_EDGE_NAME}" \
              --arg diego_brain_nsx_lb_pool_name "${DIEGO_BRAIN_NSX_LB_POOL_NAME}" \
              --arg diego_brain_nsx_lb_security_group "${DIEGO_BRAIN_NSX_LB_SECURITY_GROUP}" \
              --arg diego_brain_nsx_lb_port "${DIEGO_BRAIN_NSX_LB_PORT}" \
              --arg mysql_nsx_security_group "${MYSQL_NSX_SECURITY_GROUP}" \
              --arg mysql_nsx_lb_edge_name "${MYSQL_NSX_LB_EDGE_NAME}" \
              --arg mysql_nsx_lb_pool_name "${MYSQL_NSX_LB_POOL_NAME}" \
              --arg mysql_nsx_lb_security_group "${MYSQL_NSX_LB_SECURITY_GROUP}" \
              --arg mysql_nsx_lb_port "${MYSQL_NSX_LB_PORT}" \
              --argjson job_resource_config "${JOB_RESOURCE_CONFIG}" \
              '
              $job_resource_config

              |

              if $ha_proxy_elb_name != "" then
                .ha_proxy |= . + { "elb_names": [ $ha_proxy_elb_name ] }
              else
                .
              end

              |

              if $ha_proxy_floating_ips != "" then
                .ha_proxy |= . + { "floating_ips": $ha_proxy_floating_ips }
              else
                .
              end

              |

              # NSX LBs

              if $tcp_router_nsx_lb_edge_name != "" then
                .tcp_router |= . + {
                  "nsx_security_groups": [$tcp_router_nsx_security_group],
                  "nsx_lbs": [
                    {
                      "edge_name": $tcp_router_nsx_lb_edge_name,
                      "pool_name": $tcp_router_nsx_lb_pool_name,
                      "security_group": $tcp_router_nsx_lb_security_group,
                      "port": $tcp_router_nsx_lb_port
                    }
                  ]
                }
              else
                .
              end

              |

              if $router_nsx_lb_edge_name != "" then
                .router |= . + {
                  "nsx_security_groups": [$router_nsx_security_group],
                  "nsx_lbs": [
                    {
                      "edge_name": $router_nsx_lb_edge_name,
                      "pool_name": $router_nsx_lb_pool_name,
                      "security_group": $router_nsx_lb_security_group,
                      "port": $router_nsx_lb_port
                    }
                  ]
                }
              else
                .
              end

              |

              if $diego_brain_nsx_lb_edge_name != "" then
                .diego_brain |= . + {
                  "nsx_security_groups": [$diego_brain_nsx_security_group],
                  "nsx_lbs": [
                    {
                      "edge_name": $diego_brain_nsx_lb_edge_name,
                      "pool_name": $diego_brain_nsx_lb_pool_name,
                      "security_group": $diego_brain_nsx_lb_security_group,
                      "port": $diego_brain_nsx_lb_port
                    }
                  ]
                }
              else
                .
              end

              |

              # MySQL

              if $mysql_nsx_lb_edge_name != "" then
                .mysql |= . + {
                  "nsx_security_groups": [$mysql_nsx_security_group],
                  "nsx_lbs": [
                    {
                      "edge_name": $mysql_nsx_lb_edge_name,
                      "pool_name": $mysql_nsx_lb_pool_name,
                      "security_group": $mysql_nsx_lb_security_group,
                      "port": $mysql_nsx_lb_port
                    }
                  ]
                }
              else
                .
              end
              '
          )

          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            --skip-ssl-validation \
            configure-product \
            --product-name cf \
            --product-properties "$cf_properties" \
            --product-network "$cf_network" \
            --product-resources "$cf_resources"

          EO_SH

          chmod +x task.sh
          ./task.sh
        dir: ""
        path: sh
    params:
      ALLOW_APP_SSH_ACCESS: {{allow_app_ssh_access}}
      APPS_DOMAIN: {{apps_domain}}
      AUTHENTICATION_MODE: {{authentication_mode}}
      BACKUP_PREPARE_INSTANCES: {{backup_prepare_instances}}
      CLOCK_GLOBAL_INSTANCES: {{clock_global_instances}}
      CLOUD_CONTROLLER_INSTANCES: {{cloud_controller_instances}}
      CLOUD_CONTROLLER_WORKER_INSTANCES: {{cloud_controller_worker_instances}}
      COMPANY_NAME: {{company_name}}
      CONSUL_SERVER_INSTANCES: {{consul_server_instances}}
      CONTAINER_NETWORKING_NW_CIDR: {{container_networking_nw_cidr}}
      CREDHUB_INSTANCES: {{credhub_instances}}
      CREDHUB_PRIMARY_ENCRYPTION_NAME: {{credhub_primary_encryption_name}}
      CREDUB_ENCRYPTION_KEY_NAME1: {{credhub_encryption_key_name1}}
      CREDUB_ENCRYPTION_KEY_NAME2: {{credhub_encryption_key_name2}}
      CREDUB_ENCRYPTION_KEY_NAME3: {{credhub_encryption_key_name3}}
      CREDUB_ENCRYPTION_KEY_SECRET1: {{credhub_encryption_key_secret1}}
      CREDUB_ENCRYPTION_KEY_SECRET2: {{credhub_encryption_key_secret2}}
      CREDUB_ENCRYPTION_KEY_SECRET3: {{credhub_encryption_key_secret3}}
      DEFAULT_QUOTA_MAX_SERVICES_COUNT: {{default_quota_max_number_services}}
      DEFAULT_QUOTA_MEMORY_LIMIT_IN_MB: {{default_quota_memory_limit_mb}}
      DEPLOYMENT_NW_AZS: {{deployment_nw_azs}}
      DIEGO_BRAIN_INSTANCES: {{diego_brain_instances}}
      DIEGO_BRAIN_NSX_LB_EDGE_NAME: {{diego_brain_nsx_lb_edge_name}}
      DIEGO_BRAIN_NSX_LB_POOL_NAME: {{diego_brain_nsx_lb_pool_name}}
      DIEGO_BRAIN_NSX_LB_PORT: {{diego_brain_nsx_lb_port}}
      DIEGO_BRAIN_NSX_LB_SECURITY_GROUP: {{diego_brain_nsx_lb_security_group}}
      DIEGO_BRAIN_NSX_SECURITY_GROUP: {{diego_brain_nsx_security_group}}
      DIEGO_CELL_INSTANCES: {{diego_cell_instances}}
      DIEGO_DATABASE_INSTANCES: {{diego_database_instances}}
      DISABLE_HTTP_PROXY: {{disable_http_proxy}}
      DISABLE_INSECURE_COOKIES: {{disable_insecure_cookies}}
      DOPPLER_INSTANCES: {{doppler_instances}}
      ENABLE_SECURITY_EVENT_LOGGING: {{enable_security_event_logging}}
      ERT_SINGLETON_JOB_AZ: {{ert_singleton_job_az}}
      FIRST_NAME_ATTR: {{first_name_attribute}}
      FRONTEND_IDLE_TIMEOUT: {{frontend_idle_timeout}}
      GROUP_SEARCH_BASE: {{group_search_base}}
      GROUP_SEARCH_FILTER: {{group_search_filter}}
      HA_PROXY_INSTANCES: {{ha_proxy_instances}}
      HA_PROXY_IPS: {{ha_proxy_ips}}
      HA_PROXY_LB_NAME: ""
      HAPROXY_BACKEND_CA: {{haproxy_backend_ca}}
      HAPROXY_FLOATING_IPS: ""
      HAPROXY_FORWARD_TLS: {{haproxy_forward_tls}}
      HAPROXY_TLS_CIPHERS: {{haproxy_tls_ciphers}}
      IAAS: vsphere
      IGNORE_SSL_CERT: {{ignore_ssl_cert_verification}}
      INTERNET_CONNECTED: {{internet_connected}}
      LAST_NAME_ATTR: {{last_name_attribute}}
      LDAP_PWD: {{ldap_pwd}}
      LDAP_URL: {{ldap_url}}
      LDAP_USER: {{ldap_user}}
      LOGGREGATOR_ENDPOINT_PORT: {{loggregator_endpoint_port}}
      LOGGREGATOR_TRAFFICCONTROLLER_INSTANCES: {{loggregator_trafficcontroller_instances}}
      MAIL_ATTR_NAME: {{mail_attribute_name}}
      MYSQL_INSTANCES: {{mysql_instances}}
      MYSQL_MONITOR_EMAIL: {{mysql_monitor_email}}
      MYSQL_MONITOR_INSTANCES: {{mysql_monitor_instances}}
      MYSQL_NSX_LB_EDGE_NAME: {{mysql_nsx_lb_edge_name}}
      MYSQL_NSX_LB_POOL_NAME: {{mysql_nsx_lb_pool_name}}
      MYSQL_NSX_LB_PORT: {{mysql_nsx_lb_port}}
      MYSQL_NSX_LB_SECURITY_GROUP: {{mysql_nsx_lb_security_group}}
      MYSQL_NSX_SECURITY_GROUP: {{mysql_nsx_security_group}}
      MYSQL_PROXY_INSTANCES: {{mysql_proxy_instances}}
      MYSQL_STATIC_IPS: {{mysql_static_ips}}
      NATS_INSTANCES: {{nats_instances}}
      NETWORK_NAME: {{deployment_network_name}}
      NFS_SERVER_INSTANCES: {{nfs_server_instances}}
      OPS_MGR_PWD: {{opsman_admin_password}}
      OPS_MGR_USR: {{opsman_admin_username}}
      OPSMAN_CLIENT_ID: ""
      OPSMAN_CLIENT_SECRET: ""
      OPSMAN_DOMAIN_OR_IP_ADDRESS: {{opsman_domain_or_ip_address}}
      POE_SSL_CERT1: {{poe_ssl_cert1}}
      POE_SSL_CERT2: {{poe_ssl_cert2}}
      POE_SSL_CERT3: {{poe_ssl_cert3}}
      POE_SSL_KEY1: {{poe_ssl_key1}}
      POE_SSL_KEY2: {{poe_ssl_key2}}
      POE_SSL_KEY3: {{poe_ssl_key3}}
      POE_SSL_NAME1: {{poe_ssl_name1}}
      POE_SSL_NAME2: {{poe_ssl_name2}}
      POE_SSL_NAME3: {{poe_ssl_name3}}
      ROUTE_SERVICES: {{route_services}}
      ROUTER_INSTANCES: {{router_instances}}
      ROUTER_NSX_LB_EDGE_NAME: {{router_nsx_lb_edge_name}}
      ROUTER_NSX_LB_POOL_NAME: {{router_nsx_lb_pool_name}}
      ROUTER_NSX_LB_PORT: {{router_nsx_lb_port}}
      ROUTER_NSX_LB_SECURITY_GROUP: {{router_nsx_lb_security_group}}
      ROUTER_NSX_SECURITY_GROUP: {{router_nsx_security_group}}
      ROUTER_REQUEST_TIMEOUT_IN_SEC: {{router_request_timeout_in_seconds}}
      ROUTER_STATIC_IPS: {{router_static_ips}}
      ROUTER_TLS_CIPHERS: {{router_tls_ciphers}}
      ROUTING_CUSTOM_CA_CERTIFICATES: {{routing_custom_ca_certificates}}
      ROUTING_TLS_TERMINATION: {{routing_tls_termination}}
      SAML_SSL_CERT: {{saml_ssl_cert}}
      SAML_SSL_PRIVATE_KEY: {{saml_ssl_private_key}}
      SEARCH_BASE: {{search_base}}
      SEARCH_FILTER: {{search_filter}}
      SECURITY_ACKNOWLEDGEMENT: {{security_acknowledgement}}
      SKIP_CERT_VERIFY: {{skip_cert_verify}}
      SMTP_ADDRESS: {{smtp_address}}
      SMTP_AUTH_MECHANISM: {{smtp_auth_mechanism}}
      SMTP_ENABLE_STARTTLS_AUTO: {{smtp_enable_starttls_auto}}
      SMTP_FROM: {{smtp_from}}
      SMTP_PORT: {{smtp_port}}
      SMTP_PWD: {{smtp_pwd}}
      SMTP_USER: {{smtp_user}}
      SSH_STATIC_IPS: {{ssh_static_ips}}
      SYSLOG_ADAPTER_INSTANCES: {{syslog_adapter_instances}}
      SYSLOG_DRAIN_BUFFER_SIZE: {{syslog_drain_buffer_size}}
      SYSLOG_HOST: {{syslog_host}}
      SYSLOG_PORT: {{syslog_port}}
      SYSLOG_PROTOCOL: {{syslog_protocol}}
      SYSLOG_SCHEDULER_INSTANCES: {{syslog_scheduler_instances}}
      SYSTEM_DOMAIN: {{system_domain}}
      TCP_ROUTER_INSTANCES: {{tcp_router_instances}}
      TCP_ROUTER_NSX_LB_EDGE_NAME: {{tcp_router_nsx_lb_edge_name}}
      TCP_ROUTER_NSX_LB_POOL_NAME: {{tcp_router_nsx_lb_pool_name}}
      TCP_ROUTER_NSX_LB_PORT: {{tcp_router_nsx_lb_port}}
      TCP_ROUTER_NSX_LB_SECURITY_GROUP: {{tcp_router_nsx_lb_security_group}}
      TCP_ROUTER_NSX_SECURITY_GROUP: {{tcp_router_nsx_security_group}}
      TCP_ROUTER_STATIC_IPS: {{tcp_router_static_ips}}
      TCP_ROUTING: {{tcp_routing}}
      TCP_ROUTING_PORTS: {{tcp_routing_ports}}
      UAA_INSTANCES: {{uaa_instances}}
    task: configure
  - config:
      image_resource:
        params:
          unpack: true
        source:
          access_key_id: {{s3_access_key_id}}
          bucket: {{s3_bucket}}
          endpoint: {{s3_endpoint}}
          regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
          secret_access_key: {{s3_secret_access_key}}
        type: s3
      inputs: []
      params:
        ERRANDS_TO_DISABLE: ""
        OPSMAN_CLIENT_ID: ""
        OPSMAN_CLIENT_SECRET: ""
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ""
        OPSMAN_PASSWORD: ""
        OPSMAN_USERNAME: ""
        PRODUCT_NAME: ""
      platform: linux
      run:
        args:
        - -c
        - |
          cat > task.sh <<'EO_SH'
          #!/bin/bash

          set -eu

          if [[ -z "$ERRANDS_TO_DISABLE" ]] || [[ "$ERRANDS_TO_DISABLE" == "none" ]]; then
            echo Nothing to do.
            exit 0
          fi

          enabled_errands=$(
            om-linux \
              --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
              --skip-ssl-validation \
              --client-id "${OPSMAN_CLIENT_ID}" \
              --client-secret "${OPSMAN_CLIENT_SECRET}" \
              --username "$OPSMAN_USERNAME" \
              --password "$OPSMAN_PASSWORD" \
              errands \
              --product-name "$PRODUCT_NAME" |
            tail -n+4 | head -n-1 | grep -v false | cut -d'|' -f2 | tr -d ' '
          )

          if [[ "$ERRANDS_TO_DISABLE" == "all" ]]; then
            errands_to_disable="${enabled_errands[@]}"
          else
            errands_to_disable=$(echo "$ERRANDS_TO_DISABLE" | tr ',' '\n')
          fi

          will_disable=$(
            echo $enabled_errands |
            jq \
              --arg to_disable "${errands_to_disable[@]}" \
              --raw-input \
              --raw-output \
              'split(" ")
              | reduce .[] as $errand ([];
                 if $to_disable | contains($errand) then
                   . + [$errand]
                 else
                   .
                 end)
              | join("\n")'
          )

          if [ -z "$will_disable" ]; then
            echo Nothing to do.
            exit 0
          fi

          while read errand; do
            echo -n Disabling $errand...
            om-linux \
              --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
              --skip-ssl-validation \
              --client-id "${OPSMAN_CLIENT_ID}" \
              --client-secret "${OPSMAN_CLIENT_SECRET}" \
              --username "$OPSMAN_USERNAME" \
              --password "$OPSMAN_PASSWORD" \
              set-errand-state \
              --product-name "$PRODUCT_NAME" \
              --errand-name $errand \
              --post-deploy-state "disabled"
            echo done
          done < <(echo "$will_disable")

          EO_SH

          chmod +x task.sh
          ./task.sh
        dir: ""
        path: sh
    params:
      ERRANDS_TO_DISABLE: {{ert_errands_to_disable}}
      OPSMAN_CLIENT_ID: ""
      OPSMAN_CLIENT_SECRET: ""
      OPSMAN_DOMAIN_OR_IP_ADDRESS: {{opsman_domain_or_ip_address}}
      OPSMAN_PASSWORD: {{opsman_admin_password}}
      OPSMAN_USERNAME: {{opsman_admin_username}}
      PRODUCT_NAME: cf
    task: disable-errands
  - config:
      image_resource:
        params:
          unpack: true
        source:
          access_key_id: {{s3_access_key_id}}
          bucket: {{s3_bucket}}
          endpoint: {{s3_endpoint}}
          regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
          secret_access_key: {{s3_secret_access_key}}
        type: s3
      inputs: []
      params:
        OPSMAN_CLIENT_ID: ""
        OPSMAN_CLIENT_SECRET: ""
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ""
        OPSMAN_PASSWORD: ""
        OPSMAN_USERNAME: ""
      platform: linux
      run:
        args:
        - -c
        - |
          cat > task.sh <<'EO_SH'
          #!/bin/bash

          set -eu

          # Copyright 2017-Present Pivotal Software, Inc. All rights reserved.
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #  http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.

          echo "Applying changes on Ops Manager @ ${OPSMAN_DOMAIN_OR_IP_ADDRESS}"

          om-linux \
            --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
            --skip-ssl-validation \
            --client-id "${OPSMAN_CLIENT_ID}" \
            --client-secret "${OPSMAN_CLIENT_SECRET}" \
            --username "${OPSMAN_USERNAME}" \
            --password "${OPSMAN_PASSWORD}" \
            apply-changes \
            --ignore-warnings

          EO_SH

          chmod +x task.sh
          ./task.sh
        dir: ""
        path: sh
    params:
      OPSMAN_CLIENT_ID: ""
      OPSMAN_CLIENT_SECRET: ""
      OPSMAN_DOMAIN_OR_IP_ADDRESS: {{opsman_domain_or_ip_address}}
      OPSMAN_PASSWORD: {{opsman_admin_password}}
      OPSMAN_USERNAME: {{opsman_admin_username}}
    task: deploy
- name: wipe-env
  plan:
  - aggregate:
    - do: []
  - config:
      image_resource:
        params:
          unpack: true
        source:
          access_key_id: {{s3_access_key_id}}
          bucket: {{s3_bucket}}
          endpoint: {{s3_endpoint}}
          regexp: czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar
          secret_access_key: {{s3_secret_access_key}}
        type: s3
      inputs: []
      params:
        GOVC_CA_CERT: ""
        GOVC_DATACENTER: ""
        GOVC_DATASTORE: ""
        GOVC_HOST: ""
        GOVC_INSECURE: ""
        GOVC_NETWORK: ""
        GOVC_PASSWORD: ""
        GOVC_RESOURCE_POOL: ""
        GOVC_URL: ""
        GOVC_USERNAME: ""
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ""
        OPSMAN_IP: ""
        OPSMAN_PASSWORD: ""
        OPSMAN_USERNAME: ""
      platform: linux
      run:
        args:
        - -c
        - |
          cat > task.sh <<'EO_SH'
          #!/bin/bash
          set -eu

          root=$(pwd)

          export GOVC_TLS_CA_CERTS=/tmp/vcenter-ca.pem
          echo "$GOVC_CA_CERT" > $GOVC_TLS_CA_CERTS

          function check_opsman_available {
            local opsman_domain=$1

            if [[ -z $(dig +short $opsman_domain) ]]; then
              echo "unavailable"
              return
            fi

            status_code=$(curl -L -s -o /dev/null -w "%{http_code}" -k "https://${opsman_domain}/login/ensure_availability")
            if [[ $status_code != 200 ]]; then
              echo "unavailable"
              return
            fi

            echo "available"
          }

          opsman_available=$(check_opsman_available $OPSMAN_DOMAIN_OR_IP_ADDRESS)
          if [[ $opsman_available == "available" ]]; then
            om-linux \
              --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
              --skip-ssl-validation \
              --username "$OPSMAN_USERNAME" \
              --password "$OPSMAN_PASSWORD" \
              delete-installation
          fi

          # Delete Active OpsMan
          possible_opsmans=$(govc find ${GOVC_RESOURCE_POOL} -type m -guest.ipAddress ${OPSMAN_IP} -runtime.powerState poweredOn)

          for opsman in ${possible_opsmans}; do
            network="$(govc vm.info -r=true -json ${opsman} | jq -r '.VirtualMachines[0].Guest.Net[0].Network')"
            if [[ ${network} == ${GOVC_NETWORK} ]]; then
              echo "Powering off and removing ${opsman}..."
              set +e
              govc vm.power -vm.ipath=${opsman} -off
              set -e
              govc vm.destroy -vm.ipath=${opsman}
            fi
          done

          EO_SH

          chmod +x task.sh
          ./task.sh
        dir: ""
        path: sh
    params:
      GOVC_CA_CERT: {{vcenter_ca_cert}}
      GOVC_DATACENTER: {{vcenter_datacenter}}
      GOVC_DATASTORE: {{vcenter_datastore}}
      GOVC_HOST: {{om_vm_host}}
      GOVC_INSECURE: {{vcenter_insecure}}
      GOVC_NETWORK: {{om_vm_network}}
      GOVC_PASSWORD: {{vcenter_pwd}}
      GOVC_RESOURCE_POOL: {{om_resource_pool}}
      GOVC_URL: {{vcenter_host}}
      GOVC_USERNAME: {{vcenter_usr}}
      OPSMAN_DOMAIN_OR_IP_ADDRESS: {{opsman_domain_or_ip_address}}
      OPSMAN_IP: {{om_ip}}
      OPSMAN_PASSWORD: {{opsman_admin_password}}
      OPSMAN_USERNAME: {{opsman_admin_username}}
    task: wipe
resources:
- name: pcf-ops-manager
  source:
    access_key_id: {{s3_access_key_id}}
    bucket: {{s3_bucket}}
    endpoint: {{s3_endpoint}}
    regexp: ops-manager/ops-manager-(.*).tar
    secret_access_key: {{s3_secret_access_key}}
  type: s3
- name: elastic-runtime
  source:
    access_key_id: {{s3_access_key_id}}
    bucket: {{s3_bucket}}
    endpoint: {{s3_endpoint}}
    regexp: elastic-runtime/elastic-runtime-(.*).tar
    secret_access_key: {{s3_secret_access_key}}
  type: s3
